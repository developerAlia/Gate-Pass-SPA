"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Subject_1 = require("rxjs/Subject");
var tour_component_1 = require("./intro-tour/tour.component");
var options_1 = require("./options");
var variables_1 = require("./variables");
var HintService = (function () {
    function HintService() {
        this.anchors = {};
        this.overlay$ = new Subject_1.Subject();
        this.registration$ = new Subject_1.Subject();
        this.finish$ = new Subject_1.Subject();
        this.showingStep$ = new Subject_1.Subject();
    }
    HintService.prototype.initialize = function (options) {
        if (options === void 0) { options = new options_1.HintOptions(); }
        this.hintOptions = Object.assign(new options_1.HintOptions(), options);
        var nodes = document.getElementsByTagName(this.hintOptions.stepTag);
        this.steps = this.initSteps(nodes);
        this.startAt(0);
        this.overlay$.next(true);
    };
    HintService.prototype.show = function (step) {
        var anchor = this.anchors[step.selector];
        if (!anchor) {
            return;
        }
        anchor.showStep();
    };
    HintService.prototype.showNext = function () {
        this.currentStep = this.steps[this.steps.indexOf(this.currentStep) + 1];
        var anchor = this.anchors[this.currentStep.selector];
        if (!anchor) {
            return;
        }
        anchor.showStep();
    };
    HintService.prototype.overlayNext = function () {
        if (this.hasNext()) {
            this.anchors[this.currentStep.selector].hideStep();
            this.showNext();
        }
        else {
            this.end();
        }
    };
    HintService.prototype.showPrev = function () {
        this.currentStep = this.steps[this.steps.indexOf(this.currentStep) - 1];
        var anchor = this.anchors[this.currentStep.selector];
        if (!anchor) {
            return;
        }
        anchor.showStep();
    };
    HintService.prototype.register = function (selector, component) {
        if (this.anchors[selector]) {
            throw 'selector ' + selector + ' already registered!';
        }
        this.anchors[selector] = component;
        this.registration$.next(true);
    };
    HintService.prototype.hasNext = function () {
        return this.steps.indexOf(this.currentStep) < this.steps.length - 1;
    };
    HintService.prototype.hasPrev = function () {
        return this.steps.indexOf(this.currentStep) > 0;
    };
    HintService.prototype.end = function () {
        this.overlay$.next(false);
        var anchor = this.anchors[this.currentStep.selector];
        if (!anchor) {
            return;
        }
        this.currentStep = undefined;
        anchor.hideStep();
        this.finish$.next(true);
    };
    HintService.prototype.startAt = function (stepId) {
        this.currentStep = this.steps[stepId];
        this.show(this.currentStep);
    };
    HintService.prototype.initSteps = function (nodes) {
        var steps = [];
        for (var i = 0; i < nodes.length; i++) {
            steps.push({
                selector: nodes[i].getAttribute('selector'),
                order: +nodes[i].getAttribute('order') || this.hintOptions.defaultOrder,
            });
        }
        return steps = steps.sort(function (el1, el2) {
            return el1.order - el2.order;
        });
    };
    HintService.prototype.putOverlay = function () {
        document.getElementsByTagName('body');
    };
    HintService.decorators = [
        { type: core_1.Injectable },
    ];
    HintService.ctorParameters = function () { return []; };
    return HintService;
}());
exports.HintService = HintService;
//# sourceMappingURL=hint.service.js.map